cmake_minimum_required(VERSION 3.20)
project(path_tracer)

set(CMAKE_CXX_STANDARD 20)

set(SDL2_DIR <path_to_SDL2>)
set(SDL2_LIB_DIR ${SDL2_DIR}/lib)

file(GLOB raytracer_SRC
        ${PROJECT_SOURCE_DIR}/source/*.cc
        ${PROJECT_SOURCE_DIR}/source/*.h
        ${PROJECT_SOURCE_DIR}/source/scene/*.cc
        ${PROJECT_SOURCE_DIR}/source/scene/*.h
        ${PROJECT_SOURCE_DIR}/source/constants/*.h
        ${PROJECT_SOURCE_DIR}/source/m_diffuse_color/*.h
        ${PROJECT_SOURCE_DIR}/source/m_diffuse_color/*.cc
        ${PROJECT_SOURCE_DIR}/source/renderer/*.h
        ${PROJECT_SOURCE_DIR}/source/math/*.h
        ${PROJECT_SOURCE_DIR}/source/math/*.cc
        ${PROJECT_SOURCE_DIR}/source/textures/bmp/*.h
        ${PROJECT_SOURCE_DIR}/source/textures/bmp/*.cc
)

message(STATUS "Checking OpenMP")
find_package(OpenMP)
IF(OPENMP_FOUND)
    message("Found OpenMP")
    # add flags for OpenMP
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${OpenMP_SHARED_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ELSE()
    message("No OpenMP found")
ENDIF()

include_directories(${SDL2_DIR}/include)

add_executable(path_tracer ${raytracer_SRC})

add_custom_command(TARGET path_tracer POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "<path_to_SDL2.dll>"
        $<TARGET_FILE_DIR:path_tracer>)

target_include_directories(path_tracer PRIVATE <path_to_glm>)
target_link_libraries(path_tracer PRIVATE ${SDL2_LIB_DIR}/libSDL2.dll.a ${SDL2_LIB_DIR}/libSDL2main.a)
target_compile_options(path_tracer PUBLIC -Wall -Wextra -Wpedantic -O3)
